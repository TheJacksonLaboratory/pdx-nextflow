#!/bin/sh
#
# Run pipeline for all instances awaiting up to a max number of instances. 
#
# Usage: run_all_awaiting  [listfile]
#


# The default listfile...
INLIST=~svc-pdxread/workflow_status/awaits_pipeline

# The default max number of instances to launch...
maxrun=40

GROUP=`id -gn`
if [ "$USER" != "svc-pdx" -o $GROUP != "pdx-data" ]; then
  echo "ERROR: you must be svc-pdx (group pdx-data) to run this (use 'newgrp pdx-data' to set group)"
  exit 1
fi


if [ $# -eq 1 ]; then
  INLIST=$1
fi
if [ -f $INLIST ]; then
  echo "getting instances from $INLIST ..."
else
  echo "cannot open $INLIST ... quitting"
  exit 1
fi

echo
echo "Disk:"
df -h | grep pdx_resource_service
echo

ARGS="--real"

cat $INLIST | head  -$maxrun  |

while read  model  sample  platform
do

  # be sure an analysis dir exists for the model...
  if [ -d $pdx/analysis/$model ]; then
    test
  else
    mkdir $pdx/analysis/$model
  fi

  # run the appropriate pipeline...
  if [ $platform == "CTP" ]; then
    echo "run_ctp  $model  $sample  $ARGS ............."
    run_ctp  $model  $sample  $ARGS

  elif [ $platform == "stRNA_Seq" -o $platform == "RNA_Seq" ]; then
    echo "run_rnaseq  $model  $sample  $platform  $ARGS ............."
    run_rnaseq  $model  $sample  $platform  $ARGS

  elif [ $platform == "SNP" ]; then
    echo "run_cnv  $model  $sample  $ARGS ............"
    run_cnv  $model  $sample  $ARGS

  elif [ $platform == "stRNA_Fusion" -o $platform == "RNA_Fusion" ]; then
    echo "run_rnafusion  $model  $sample  $platform  $ARGS ............."
    run_rnafusion  $model  $sample  $platform  $ARGS

  else
    echo "Skipping $platform ... No elion / nextflow support yet"
    continue
  fi

done




